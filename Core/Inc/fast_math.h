#pragma once

#include <stdint.h>

double fast_cos(double rad);
double fast_sin(double rad);

static const int8_t cos_table[256] = {
  127, 127, 127, 127, 127, 127, 126, 126, 125, 124, 124, 123, 122, 121, 120, 119, 118, 117, 115, 114, 112, 111, 109, 108, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 85, 83, 81, 78, 76, 73, 71, 68, 65, 63, 60, 57, 54, 51, 48, 46, 43, 40, 37, 34, 31, 28, 24, 21, 18, 15, 12, 9, 6, 3, 0, -3, -6, -9, -12, -15, -18, -21, -24, -28, -31, -34, -37, -40, -43, -46, -48, -51, -54, -57, -60, -63, -65, -68, -71, -73, -76, -78, -81, -83, -85, -88, -90, -92, -94, -96, -98, -100, -102, -104, -106, -108, -109, -111, -112, -114, -115, -117, -118, -119, -120, -121, -122, -123, -124, -124, -125, -126, -126, -127, -127, -127, -127, -127, -128, -127, -127, -127, -127, -127, -126, -126, -125, -124, -124, -123, -122, -121, -120, -119, -118, -117, -115, -114, -112, -111, -109, -108, -106, -104, -102, -100, -98, -96, -94, -92, -90, -88, -85, -83, -81, -78, -76, -73, -71, -68, -65, -63, -60, -57, -54, -51, -48, -46, -43, -40, -37, -34, -31, -28, -24, -21, -18, -15, -12, -9, -6, -3, 0, 3, 6, 9, 12, 15, 18, 21, 24, 28, 31, 34, 37, 40, 43, 46, 48, 51, 54, 57, 60, 63, 65, 68, 71, 73, 76, 78, 81, 83, 85, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 126, 126, 127, 127, 127, 127, 127
};

static const int8_t sin_table[256] = {
  0, 3, 6, 9, 12, 15, 18, 21, 24, 28, 31, 34, 37, 40, 43, 46, 48, 51, 54, 57, 60, 63, 65, 68, 71, 73, 76, 78, 81, 83, 85, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 109, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 124, 125, 126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 126, 126, 125, 124, 124, 123, 122, 121, 120, 119, 118, 117, 115, 114, 112, 111, 109, 108, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 85, 83, 81, 78, 76, 73, 71, 68, 65, 63, 60, 57, 54, 51, 48, 46, 43, 40, 37, 34, 31, 28, 24, 21, 18, 15, 12, 9, 6, 3, 0, -3, -6, -9, -12, -15, -18, -21, -24, -28, -31, -34, -37, -40, -43, -46, -48, -51, -54, -57, -60, -63, -65, -68, -71, -73, -76, -78, -81, -83, -85, -88, -90, -92, -94, -96, -98, -100, -102, -104, -106, -108, -109, -111, -112, -114, -115, -117, -118, -119, -120, -121, -122, -123, -124, -124, -125, -126, -126, -127, -127, -127, -127, -127, -128, -127, -127, -127, -127, -127, -126, -126, -125, -124, -124, -123, -122, -121, -120, -119, -118, -117, -115, -114, -112, -111, -109, -108, -106, -104, -102, -100, -98, -96, -94, -92, -90, -88, -85, -83, -81, -78, -76, -73, -71, -68, -65, -63, -60, -57, -54, -51, -48, -46, -43, -40, -37, -34, -31, -28, -24, -21, -18, -15, -12, -9, -6, -3
};

static const int32_t cos_sin_table[256] = {
    0x00000080, 0x0003007F, 0x0006007F, 0x0009007F, 0x000C007F, 0x000F007F, 0x0012007E, 0x0015007E, 0x0018007D, 0x001C007C, 0x001F007C, 0x0022007B, 0x0025007A, 0x00280079, 0x002B0078, 0x002E0077, 0x00300076, 0x00330075, 0x00360073, 0x00390072, 0x003C0070, 0x003F006F, 0x0041006D, 0x0044006C, 0x0047006A, 0x00490068, 0x004C0066, 0x004E0064, 0x00510062, 0x00530060, 0x0055005E, 0x0058005C, 0x005A005A, 0x005C0058, 0x005E0055, 0x00600053, 0x00620051, 0x0064004E, 0x0066004C, 0x00680049, 0x006A0047, 0x006C0044, 0x006D0041, 0x006F003F, 0x0070003C, 0x00720039, 0x00730036, 0x00750033, 0x00760030, 0x0077002E, 0x0078002B, 0x00790028, 0x007A0025, 0x007B0022, 0x007C001F, 0x007C001C, 0x007D0018, 0x007E0015, 0x007E0012, 0x007F000F, 0x007F000C, 0x007F0009, 0x007F0006, 0x007F0003, 0x00800000, 0x007FFFFD, 0x007FFFFA, 0x007FFFF7, 0x007FFFF4, 0x007FFFF1, 0x007EFFEE, 0x007EFFEB, 0x007DFFE8, 0x007CFFE4, 0x007CFFE1, 0x007BFFDE, 0x007AFFDB, 0x0079FFD8, 0x0078FFD5, 0x0077FFD2, 0x0076FFD0, 0x0075FFCD, 0x0073FFCA, 0x0072FFC7, 0x0070FFC4, 0x006FFFC1, 0x006DFFBF, 0x006CFFBC, 0x006AFFB9, 0x0068FFB7, 0x0066FFB4, 0x0064FFB2, 0x0062FFAF, 0x0060FFAD, 0x005EFFAB, 0x005CFFA8, 0x005AFFA6, 0x0058FFA4, 0x0055FFA2, 0x0053FFA0, 0x0051FF9E, 0x004EFF9C, 0x004CFF9A, 0x0049FF98, 0x0047FF96, 0x0044FF94, 0x0041FF93, 0x003FFF91, 0x003CFF90, 0x0039FF8E, 0x0036FF8D, 0x0033FF8B, 0x0030FF8A, 0x002EFF89, 0x002BFF88, 0x0028FF87, 0x0025FF86, 0x0022FF85, 0x001FFF84, 0x001CFF84, 0x0018FF83, 0x0015FF82, 0x0012FF82, 0x000FFF81, 0x000CFF81, 0x0009FF81, 0x0006FF81, 0x0003FF81, 0x0000FF80, 0xFFFDFF81, 0xFFFAFF81, 0xFFF7FF81, 0xFFF4FF81, 0xFFF1FF81, 0xFFEEFF82, 0xFFEBFF82, 0xFFE8FF83, 0xFFE4FF84, 0xFFE1FF84, 0xFFDEFF85, 0xFFDBFF86, 0xFFD8FF87, 0xFFD5FF88, 0xFFD2FF89, 0xFFD0FF8A, 0xFFCDFF8B, 0xFFCAFF8D, 0xFFC7FF8E, 0xFFC4FF90, 0xFFC1FF91, 0xFFBFFF93, 0xFFBCFF94, 0xFFB9FF96, 0xFFB7FF98, 0xFFB4FF9A, 0xFFB2FF9C, 0xFFAFFF9E, 0xFFADFFA0, 0xFFABFFA2, 0xFFA8FFA4, 0xFFA6FFA6, 0xFFA4FFA8, 0xFFA2FFAB, 0xFFA0FFAD, 0xFF9EFFAF, 0xFF9CFFB2, 0xFF9AFFB4, 0xFF98FFB7, 0xFF96FFB9, 0xFF94FFBC, 0xFF93FFBF, 0xFF91FFC1, 0xFF90FFC4, 0xFF8EFFC7, 0xFF8DFFCA, 0xFF8BFFCD, 0xFF8AFFD0, 0xFF89FFD2, 0xFF88FFD5, 0xFF87FFD8, 0xFF86FFDB, 0xFF85FFDE, 0xFF84FFE1, 0xFF84FFE4, 0xFF83FFE8, 0xFF82FFEB, 0xFF82FFEE, 0xFF81FFF1, 0xFF81FFF4, 0xFF81FFF7, 0xFF81FFFA, 0xFF81FFFD, 0xFF800000, 0xFF810003, 0xFF810006, 0xFF810009, 0xFF81000C, 0xFF81000F, 0xFF820012, 0xFF820015, 0xFF830018, 0xFF84001C, 0xFF84001F, 0xFF850022, 0xFF860025, 0xFF870028, 0xFF88002B, 0xFF89002E, 0xFF8A0030, 0xFF8B0033, 0xFF8D0036, 0xFF8E0039, 0xFF90003C, 0xFF91003F, 0xFF930041, 0xFF940044, 0xFF960047, 0xFF980049, 0xFF9A004C, 0xFF9C004E, 0xFF9E0051, 0xFFA00053, 0xFFA20055, 0xFFA40058, 0xFFA6005A, 0xFFA8005C, 0xFFAB005E, 0xFFAD0060, 0xFFAF0062, 0xFFB20064, 0xFFB40066, 0xFFB70068, 0xFFB9006A, 0xFFBC006C, 0xFFBF006D, 0xFFC1006F, 0xFFC40070, 0xFFC70072, 0xFFCA0073, 0xFFCD0075, 0xFFD00076, 0xFFD20077, 0xFFD50078, 0xFFD80079, 0xFFDB007A, 0xFFDE007B, 0xFFE1007C, 0xFFE4007C, 0xFFE8007D, 0xFFEB007E, 0xFFEE007E, 0xFFF1007F, 0xFFF4007F, 0xFFF7007F, 0xFFFA007F, 0xFFFD007F
};

static inline int8_t icos(int ang) {
    return cos_table[ang & 0xFF];
}

static inline int8_t isin(int ang) {
    return cos_table[(ang - 64) & 0xFF];
}

static inline int32_t smlad(int32_t lhs, int32_t rhs, int32_t acc) {
    int32_t result;
    asm inline (
        "smlad %0, %1, %2, %3"
        : "=r" (result)
        : "r" (lhs), "r" (rhs), "r" (acc)
    );
    return result;
}

typedef struct {
    float re;
    float im;
} complexf_t;

static inline complexf_t complexf_mul(complexf_t lhs, complexf_t rhs) {
    // (a + bj) * (x + yj) 
    // (ax - by) + (ay + bx)j

    complexf_t dst;
    dst.re = lhs.re * rhs.re - lhs.im * rhs.im;
    dst.im = lhs.re * rhs.im + lhs.im * rhs.re;
    return dst;
}

static inline complexf_t complexf_conj(complexf_t val) {
   complexf_t dst;
   dst.re =  val.re;
   dst.im = -val.im;
   return dst;
}

static inline complexf_t complexf_div(complexf_t lhs, complexf_t rhs) {
    // (a + bj) / (x + yj)
    // (a + bj) (x - yj) / ((x + yj) (x - yj))
    float denom = rhs.re * rhs.re + rhs.im * rhs.im;
    complexf_t dst = complexf_mul(lhs, complexf_conj(rhs));
    dst.re /= denom;
    dst.im /= denom;
    return dst;
}
